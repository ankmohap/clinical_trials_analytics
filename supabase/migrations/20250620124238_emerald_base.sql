-- Create staging tables for clinical trials data
-- This script creates the necessary staging tables in Snowflake

USE DATABASE CLINICAL_TRIALS;
USE SCHEMA RAW_DATA;

-- Create staging table for raw clinical trials data
CREATE TABLE IF NOT EXISTS STAGING_CLINICAL_TRIALS (
    NCT_ID VARCHAR(50) PRIMARY KEY,
    BRIEF_TITLE VARCHAR(1000),
    OFFICIAL_TITLE VARCHAR(2000),
    OVERALL_STATUS VARCHAR(100),
    STUDY_TYPE VARCHAR(100),
    PHASE VARCHAR(100),
    CONDITION VARCHAR(2000),
    INTERVENTION_NAME VARCHAR(2000),
    PRIMARY_OUTCOME_MEASURE VARCHAR(5000),
    STUDY_FIRST_SUBMIT_DATE DATE,
    LAST_UPDATE_SUBMIT_DATE DATE,
    COMPLETION_DATE DATE,
    LOCATION_CITY VARCHAR(200),
    LOCATION_STATE VARCHAR(100),
    LOCATION_COUNTRY VARCHAR(100),
    SPONSOR_NAME VARCHAR(500),
    EXTRACTION_TIMESTAMP TIMESTAMP_NTZ,
    DATA_SOURCE VARCHAR(100),
    BATCH_ID VARCHAR(100),
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Create file format for Parquet files
CREATE OR REPLACE FILE FORMAT PARQUET_FORMAT
    TYPE = 'PARQUET'
    COMPRESSION = 'SNAPPY';

-- Create external stage for S3 data
CREATE OR REPLACE STAGE CLINICAL_TRIALS_STAGE
    URL = 's3://clinical-trials-data/raw_data/clinical_trials/'
    CREDENTIALS = (
        AWS_KEY_ID = '${AWS_ACCESS_KEY_ID}'
        AWS_SECRET_KEY = '${AWS_SECRET_ACCESS_KEY}'
    )
    FILE_FORMAT = PARQUET_FORMAT;

-- Create sequence for audit purposes
CREATE OR REPLACE SEQUENCE STAGING_AUDIT_SEQ
    START = 1
    INCREMENT = 1;

-- Create audit table for tracking data loads
CREATE TABLE IF NOT EXISTS STAGING_DATA_LOAD_AUDIT (
    AUDIT_ID NUMBER DEFAULT STAGING_AUDIT_SEQ.NEXTVAL PRIMARY KEY,
    BATCH_ID VARCHAR(100) NOT NULL,
    TABLE_NAME VARCHAR(100) NOT NULL,
    RECORDS_LOADED NUMBER,
    LOAD_START_TIME TIMESTAMP_NTZ,
    LOAD_END_TIME TIMESTAMP_NTZ,
    LOAD_STATUS VARCHAR(50),
    ERROR_MESSAGE VARCHAR(5000),
    S3_FILE_PATH VARCHAR(500),
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Create table for storing data quality metrics
CREATE TABLE IF NOT EXISTS DATA_QUALITY_METRICS (
    METRIC_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    BATCH_ID VARCHAR(100) NOT NULL,
    TABLE_NAME VARCHAR(100) NOT NULL,
    METRIC_NAME VARCHAR(100) NOT NULL,
    METRIC_VALUE NUMBER,
    METRIC_THRESHOLD NUMBER,
    METRIC_STATUS VARCHAR(50),
    CHECK_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS IDX_STAGING_CLINICAL_TRIALS_BATCH_ID 
    ON STAGING_CLINICAL_TRIALS(BATCH_ID);

CREATE INDEX IF NOT EXISTS IDX_STAGING_CLINICAL_TRIALS_STATUS 
    ON STAGING_CLINICAL_TRIALS(OVERALL_STATUS);

CREATE INDEX IF NOT EXISTS IDX_STAGING_CLINICAL_TRIALS_STUDY_TYPE 
    ON STAGING_CLINICAL_TRIALS(STUDY_TYPE);

CREATE INDEX IF NOT EXISTS IDX_STAGING_CLINICAL_TRIALS_EXTRACTION_DATE 
    ON STAGING_CLINICAL_TRIALS(EXTRACTION_TIMESTAMP);

-- Grant necessary permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON STAGING_CLINICAL_TRIALS TO ROLE ACCOUNTADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON STAGING_DATA_LOAD_AUDIT TO ROLE ACCOUNTADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON DATA_QUALITY_METRICS TO ROLE ACCOUNTADMIN;
GRANT USAGE ON STAGE CLINICAL_TRIALS_STAGE TO ROLE ACCOUNTADMIN;