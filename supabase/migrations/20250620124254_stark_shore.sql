-- Load data from S3 into staging tables
-- This script loads the clinical trials data from S3 Parquet files into Snowflake staging tables

USE DATABASE CLINICAL_TRIALS;
USE SCHEMA RAW_DATA;

-- Insert audit record for load start
INSERT INTO STAGING_DATA_LOAD_AUDIT (
    BATCH_ID,
    TABLE_NAME,
    LOAD_START_TIME,
    LOAD_STATUS,
    S3_FILE_PATH
) VALUES (
    '${BATCH_ID}',
    'STAGING_CLINICAL_TRIALS',
    CURRENT_TIMESTAMP(),
    'STARTED',
    '${S3_FILE_PATH}'
);

-- Load data from S3 Parquet files into staging table
COPY INTO STAGING_CLINICAL_TRIALS (
    NCT_ID,
    BRIEF_TITLE,
    OFFICIAL_TITLE,
    OVERALL_STATUS,
    STUDY_TYPE,
    PHASE,
    CONDITION,
    INTERVENTION_NAME,
    PRIMARY_OUTCOME_MEASURE,
    STUDY_FIRST_SUBMIT_DATE,
    LAST_UPDATE_SUBMIT_DATE,
    COMPLETION_DATE,
    LOCATION_CITY,
    LOCATION_STATE,
    LOCATION_COUNTRY,
    SPONSOR_NAME,
    EXTRACTION_TIMESTAMP,
    DATA_SOURCE,
    BATCH_ID
)
FROM (
    SELECT 
        $1:nct_id::VARCHAR(50) AS NCT_ID,
        $1:brief_title::VARCHAR(1000) AS BRIEF_TITLE,
        $1:official_title::VARCHAR(2000) AS OFFICIAL_TITLE,
        $1:overall_status::VARCHAR(100) AS OVERALL_STATUS,
        $1:study_type::VARCHAR(100) AS STUDY_TYPE,
        $1:phase::VARCHAR(100) AS PHASE,
        $1:condition::VARCHAR(2000) AS CONDITION,
        $1:intervention_name::VARCHAR(2000) AS INTERVENTION_NAME,
        $1:primary_outcome_measure::VARCHAR(5000) AS PRIMARY_OUTCOME_MEASURE,
        TO_DATE($1:study_first_submit_date::VARCHAR) AS STUDY_FIRST_SUBMIT_DATE,
        TO_DATE($1:last_update_submit_date::VARCHAR) AS LAST_UPDATE_SUBMIT_DATE,
        TO_DATE($1:completion_date::VARCHAR) AS COMPLETION_DATE,
        $1:location_city::VARCHAR(200) AS LOCATION_CITY,
        $1:location_state::VARCHAR(100) AS LOCATION_STATE,
        $1:location_country::VARCHAR(100) AS LOCATION_COUNTRY,
        $1:sponsor_name::VARCHAR(500) AS SPONSOR_NAME,
        TO_TIMESTAMP($1:extraction_timestamp::VARCHAR) AS EXTRACTION_TIMESTAMP,
        $1:data_source::VARCHAR(100) AS DATA_SOURCE,
        '${BATCH_ID}' AS BATCH_ID
    FROM @CLINICAL_TRIALS_STAGE
    WHERE METADATA$FILENAME LIKE '%${BATCH_ID}%'
)
ON_ERROR = 'CONTINUE'
PURGE = FALSE;

-- Get the number of records loaded
SET RECORDS_LOADED = (
    SELECT COUNT(*) 
    FROM STAGING_CLINICAL_TRIALS 
    WHERE BATCH_ID = '${BATCH_ID}'
);

-- Update audit record for successful load
UPDATE STAGING_DATA_LOAD_AUDIT
SET 
    LOAD_END_TIME = CURRENT_TIMESTAMP(),
    LOAD_STATUS = 'COMPLETED',
    RECORDS_LOADED = $RECORDS_LOADED
WHERE 
    BATCH_ID = '${BATCH_ID}' 
    AND TABLE_NAME = 'STAGING_CLINICAL_TRIALS'
    AND LOAD_STATUS = 'STARTED';

-- Data quality checks
INSERT INTO DATA_QUALITY_METRICS (BATCH_ID, TABLE_NAME, METRIC_NAME, METRIC_VALUE, METRIC_THRESHOLD, METRIC_STATUS)
SELECT 
    '${BATCH_ID}' AS BATCH_ID,
    'STAGING_CLINICAL_TRIALS' AS TABLE_NAME,
    'TOTAL_RECORDS' AS METRIC_NAME,
    COUNT(*) AS METRIC_VALUE,
    1 AS METRIC_THRESHOLD,
    CASE WHEN COUNT(*) >= 1 THEN 'PASS' ELSE 'FAIL' END AS METRIC_STATUS
FROM STAGING_CLINICAL_TRIALS 
WHERE BATCH_ID = '${BATCH_ID}';

-- Check for null NCT_IDs
INSERT INTO DATA_QUALITY_METRICS (BATCH_ID, TABLE_NAME, METRIC_NAME, METRIC_VALUE, METRIC_THRESHOLD, METRIC_STATUS)
SELECT 
    '${BATCH_ID}' AS BATCH_ID,
    'STAGING_CLINICAL_TRIALS' AS TABLE_NAME,
    'NULL_NCT_ID_COUNT' AS METRIC_NAME,
    COUNT(*) AS METRIC_VALUE,
    0 AS METRIC_THRESHOLD,
    CASE WHEN COUNT(*) = 0 THEN 'PASS' ELSE 'FAIL' END AS METRIC_STATUS
FROM STAGING_CLINICAL_TRIALS 
WHERE BATCH_ID = '${BATCH_ID}' AND NCT_ID IS NULL;

-- Check for duplicate NCT_IDs
INSERT INTO DATA_QUALITY_METRICS (BATCH_ID, TABLE_NAME, METRIC_NAME, METRIC_VALUE, METRIC_THRESHOLD, METRIC_STATUS)
SELECT 
    '${BATCH_ID}' AS BATCH_ID,
    'STAGING_CLINICAL_TRIALS' AS TABLE_NAME,
    'DUPLICATE_NCT_ID_COUNT' AS METRIC_NAME,
    COUNT(*) - COUNT(DISTINCT NCT_ID) AS METRIC_VALUE,
    0 AS METRIC_THRESHOLD,
    CASE WHEN COUNT(*) - COUNT(DISTINCT NCT_ID) = 0 THEN 'PASS' ELSE 'FAIL' END AS METRIC_STATUS
FROM STAGING_CLINICAL_TRIALS 
WHERE BATCH_ID = '${BATCH_ID}';

-- Check for valid study types
INSERT INTO DATA_QUALITY_METRICS (BATCH_ID, TABLE_NAME, METRIC_NAME, METRIC_VALUE, METRIC_THRESHOLD, METRIC_STATUS)
SELECT 
    '${BATCH_ID}' AS BATCH_ID,
    'STAGING_CLINICAL_TRIALS' AS TABLE_NAME,
    'INVALID_STUDY_TYPE_COUNT' AS METRIC_NAME,
    COUNT(*) AS METRIC_VALUE,
    0 AS METRIC_THRESHOLD,
    CASE WHEN COUNT(*) = 0 THEN 'PASS' ELSE 'FAIL' END AS METRIC_STATUS
FROM STAGING_CLINICAL_TRIALS 
WHERE BATCH_ID = '${BATCH_ID}' 
AND STUDY_TYPE NOT IN ('Interventional', 'Observational', 'Expanded Access');

-- Summary of load results
SELECT 
    'Load Summary for Batch: ${BATCH_ID}' AS MESSAGE,
    COUNT(*) AS TOTAL_RECORDS_LOADED,
    COUNT(DISTINCT NCT_ID) AS UNIQUE_STUDIES,
    MIN(EXTRACTION_TIMESTAMP) AS EARLIEST_EXTRACTION,
    MAX(EXTRACTION_TIMESTAMP) AS LATEST_EXTRACTION
FROM STAGING_CLINICAL_TRIALS 
WHERE BATCH_ID = '${BATCH_ID}';