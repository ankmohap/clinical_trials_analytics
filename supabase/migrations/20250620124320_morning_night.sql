-- Create data mart summary tables for clinical trials analytics
-- This script creates aggregated tables for reporting and analytics

USE DATABASE CLINICAL_TRIALS;

-- Create data mart schema
CREATE SCHEMA IF NOT EXISTS DATA_MART;
USE SCHEMA DATA_MART;

-- Create dimension table for study phases
CREATE TABLE IF NOT EXISTS DIM_STUDY_PHASE (
    PHASE_KEY NUMBER AUTOINCREMENT PRIMARY KEY,
    PHASE_CODE VARCHAR(100) UNIQUE NOT NULL,
    PHASE_DESCRIPTION VARCHAR(500),
    PHASE_ORDER NUMBER,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Insert reference data for study phases
MERGE INTO DIM_STUDY_PHASE AS target
USING (
    SELECT * FROM VALUES
        ('Not Applicable', 'Not Applicable - Studies without FDA-defined phases', 0),
        ('Early Phase 1', 'Early Phase 1 (formerly listed as Phase 0)', 1),
        ('Phase 1', 'Phase I - Safety and dosage', 2),
        ('Phase 1|Phase 2', 'Phase I/II - Combined phases', 3),
        ('Phase 2', 'Phase II - Efficacy and side effects', 4),
        ('Phase 2|Phase 3', 'Phase II/III - Combined phases', 5),
        ('Phase 3', 'Phase III - Large-scale efficacy', 6),
        ('Phase 4', 'Phase IV - Post-market surveillance', 7)
) AS source(phase_code, phase_description, phase_order)
ON target.PHASE_CODE = source.phase_code
WHEN NOT MATCHED THEN
    INSERT (PHASE_CODE, PHASE_DESCRIPTION, PHASE_ORDER)
    VALUES (source.phase_code, source.phase_description, source.phase_order);

-- Create dimension table for study status
CREATE TABLE IF NOT EXISTS DIM_STUDY_STATUS (
    STATUS_KEY NUMBER AUTOINCREMENT PRIMARY KEY,
    STATUS_CODE VARCHAR(100) UNIQUE NOT NULL,
    STATUS_DESCRIPTION VARCHAR(500),
    STATUS_CATEGORY VARCHAR(100),
    IS_ACTIVE_STATUS BOOLEAN,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Insert reference data for study status
MERGE INTO DIM_STUDY_STATUS AS target
USING (
    SELECT * FROM VALUES
        ('Not yet recruiting', 'Study has not started recruiting participants', 'Pre-Study', FALSE),
        ('Recruiting', 'Study is currently recruiting participants', 'Active', TRUE),
        ('Enrolling by invitation', 'Study is enrolling participants by invitation only', 'Active', TRUE),
        ('Active, not recruiting', 'Study is ongoing but not recruiting new participants', 'Active', TRUE),
        ('Suspended', 'Study activities have been temporarily stopped', 'Inactive', FALSE),
        ('Terminated', 'Study has been prematurely ended', 'Completed', FALSE),
        ('Completed', 'Study has been completed normally', 'Completed', FALSE),
        ('Withdrawn', 'Study has been withdrawn prior to enrollment', 'Completed', FALSE),
        ('Unknown status', 'Study status is unknown', 'Unknown', FALSE)
) AS source(status_code, status_description, status_category, is_active_status)
ON target.STATUS_CODE = source.status_code
WHEN NOT MATCHED THEN
    INSERT (STATUS_CODE, STATUS_DESCRIPTION, STATUS_CATEGORY, IS_ACTIVE_STATUS)
    VALUES (source.status_code, source.status_description, source.status_category, source.is_active_status);

-- Create fact table for clinical trials summary
CREATE TABLE IF NOT EXISTS FACT_CLINICAL_TRIALS_SUMMARY (
    SUMMARY_KEY NUMBER AUTOINCREMENT PRIMARY KEY,
    NCT_ID VARCHAR(50) NOT NULL,
    PHASE_KEY NUMBER,
    STATUS_KEY NUMBER,
    STUDY_TYPE VARCHAR(100),
    CONDITION_CATEGORY VARCHAR(200),
    SPONSOR_TYPE VARCHAR(100),
    LOCATION_COUNTRY VARCHAR(100),
    LOCATION_STATE VARCHAR(100),
    STUDY_START_YEAR NUMBER,
    STUDY_START_MONTH NUMBER,
    COMPLETION_YEAR NUMBER,
    COMPLETION_MONTH NUMBER,
    DAYS_FROM_START_TO_COMPLETION NUMBER,
    HAS_PRIMARY_OUTCOME BOOLEAN,
    HAS_INTERVENTION BOOLEAN,
    IS_INTERNATIONAL BOOLEAN,
    IS_MULTI_STATE BOOLEAN,
    EXTRACTION_DATE DATE,
    BATCH_ID VARCHAR(100),
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    
    -- Foreign key constraints
    FOREIGN KEY (PHASE_KEY) REFERENCES DIM_STUDY_PHASE(PHASE_KEY),
    FOREIGN KEY (STATUS_KEY) REFERENCES DIM_STUDY_STATUS(STATUS_KEY)
);

-- Create monthly aggregation table
CREATE TABLE IF NOT EXISTS AGG_MONTHLY_CLINICAL_TRIALS (
    AGG_KEY NUMBER AUTOINCREMENT PRIMARY KEY,
    YEAR_MONTH VARCHAR(7), -- Format: YYYY-MM
    TOTAL_STUDIES NUMBER,
    NEW_STUDIES NUMBER,
    COMPLETED_STUDIES NUMBER,
    ACTIVE_STUDIES NUMBER,
    TERMINATED_STUDIES NUMBER,
    INTERVENTIONAL_STUDIES NUMBER,
    OBSERVATIONAL_STUDIES NUMBER,
    PHASE_1_STUDIES NUMBER,
    PHASE_2_STUDIES NUMBER,
    PHASE_3_STUDIES NUMBER,
    PHASE_4_STUDIES NUMBER,
    UNIQUE_CONDITIONS NUMBER,
    UNIQUE_SPONSORS NUMBER,
    UNIQUE_COUNTRIES NUMBER,
    INTERNATIONAL_STUDIES NUMBER,
    US_STUDIES NUMBER,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Create condition analysis table
CREATE TABLE IF NOT EXISTS AGG_CONDITION_ANALYSIS (
    CONDITION_KEY NUMBER AUTOINCREMENT PRIMARY KEY,
    CONDITION_CATEGORY VARCHAR(200) NOT NULL,
    CONDITION_SUBCATEGORY VARCHAR(200),
    TOTAL_STUDIES NUMBER,
    ACTIVE_STUDIES NUMBER,
    COMPLETED_STUDIES NUMBER,
    PHASE_1_STUDIES NUMBER,
    PHASE_2_STUDIES NUMBER,
    PHASE_3_STUDIES NUMBER,
    PHASE_4_STUDIES NUMBER,
    AVG_STUDY_DURATION_DAYS NUMBER,
    TOP_SPONSORS VARCHAR(1000),
    TOP_COUNTRIES VARCHAR(1000),
    LAST_UPDATED TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Create sponsor analysis table
CREATE TABLE IF NOT EXISTS AGG_SPONSOR_ANALYSIS (
    SPONSOR_KEY NUMBER AUTOINCREMENT PRIMARY KEY,
    SPONSOR_NAME VARCHAR(500) NOT NULL,
    SPONSOR_TYPE VARCHAR(100),
    TOTAL_STUDIES NUMBER,
    ACTIVE_STUDIES NUMBER,
    COMPLETED_STUDIES NUMBER,
    INTERVENTIONAL_STUDIES NUMBER,
    OBSERVATIONAL_STUDIES NUMBER,
    UNIQUE_CONDITIONS NUMBER,
    UNIQUE_COUNTRIES NUMBER,
    AVG_STUDY_DURATION_DAYS NUMBER,
    FIRST_STUDY_DATE DATE,
    LAST_STUDY_DATE DATE,
    LAST_UPDATED TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Create geographic analysis table
CREATE TABLE IF NOT EXISTS AGG_GEOGRAPHIC_ANALYSIS (
    GEO_KEY NUMBER AUTOINCREMENT PRIMARY KEY,
    COUNTRY VARCHAR(100) NOT NULL,
    STATE VARCHAR(100),
    REGION VARCHAR(100),
    TOTAL_STUDIES NUMBER,
    ACTIVE_STUDIES NUMBER,
    COMPLETED_STUDIES NUMBER,
    UNIQUE_CONDITIONS NUMBER,
    UNIQUE_SPONSORS NUMBER,
    PHASE_1_STUDIES NUMBER,
    PHASE_2_STUDIES NUMBER,
    PHASE_3_STUDIES NUMBER,
    PHASE_4_STUDIES NUMBER,
    INTERVENTIONAL_STUDIES NUMBER,
    OBSERVATIONAL_STUDIES NUMBER,
    LAST_UPDATED TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS IDX_FACT_CLINICAL_TRIALS_NCT_ID 
    ON FACT_CLINICAL_TRIALS_SUMMARY(NCT_ID);

CREATE INDEX IF NOT EXISTS IDX_FACT_CLINICAL_TRIALS_BATCH_ID 
    ON FACT_CLINICAL_TRIALS_SUMMARY(BATCH_ID);

CREATE INDEX IF NOT EXISTS IDX_FACT_CLINICAL_TRIALS_EXTRACTION_DATE 
    ON FACT_CLINICAL_TRIALS_SUMMARY(EXTRACTION_DATE);

CREATE INDEX IF NOT EXISTS IDX_AGG_MONTHLY_YEAR_MONTH 
    ON AGG_MONTHLY_CLINICAL_TRIALS(YEAR_MONTH);

CREATE INDEX IF NOT EXISTS IDX_AGG_CONDITION_CATEGORY 
    ON AGG_CONDITION_ANALYSIS(CONDITION_CATEGORY);

CREATE INDEX IF NOT EXISTS IDX_AGG_SPONSOR_NAME 
    ON AGG_SPONSOR_ANALYSIS(SPONSOR_NAME);

CREATE INDEX IF NOT EXISTS IDX_AGG_GEOGRAPHIC_COUNTRY 
    ON AGG_GEOGRAPHIC_ANALYSIS(COUNTRY);

-- Grant necessary permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA DATA_MART TO ROLE ACCOUNTADMIN;
GRANT USAGE ON ALL SEQUENCES IN SCHEMA DATA_MART TO ROLE ACCOUNTADMIN;